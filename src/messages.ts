/*
 * SPDX-FileCopyrightText: 2020 SAP SE or an SAP affiliate company <alexander.gilin@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */

import * as _ from "lodash";

export const messages = {
  enter_cf_endpoint: "Enter Cloud Foundry endpoint",
  enter_user_email: "Enter e-mail address",
  label_enter_password: `Enter ${_.reverse(["d", "r", "o", "w", "s", "s", "a", "p"]).join("")}`,
  loggin_in: "Logging in...",
  login_success: "You have been logged in.",
  getting_orgs: "Getting Organizations...",
  getting_spaces: "Getting Spaces...",
  select_org: "Select Organization",
  select_space: "Select Space",
  set_org_space: "Setting Organization and Space...",
  success_set_org_space: "The Organization and Space have been set.",
  no_available_orgs: "There are no available organizations.",
  no_available_spaces: "There are no available spaces.",
  name_for_target: "Enter a name for the target",
  cf_config_changed: "The Cloud Foundry 'config' file has changed. The status bar will be updated.",
  not_targeted: "The organization and space in Cloud Foundry have not been set.",
  space_not_set: "Space not set",
  cf_setting_not_set: "Could not find the Cloud Foundry settings. Make sure you have assigned an org and space in Cloud Foundry.",
  service_creation_started: "Service creation started, waiting for 'Ready' state.",
  create_service_canceled_by_requester: "Cancelled by the requester - The service may have been partially created. Consider deleting it using the 'cf delete-service' command.",
  enter_service_name: "Enter a name for the service instance",
  loading_services: "Loading list of Cloud Foundry services...",
  loading_service_plan_list: "Loading list of Cloud Foundry service plans...",
  binding_service_to_file: "Binding Cloud Foundry service-instance to a local '.env' file...",
  select_service: "Select a Cloud Foundry service instance",
  error_env_save: "Could not save the '.env' resources",
  error_env_missing_file: "The '.env' file does not exist",
  error_env_get: "Could not get the '.env' file resources",
  select_services: "Select a Cloud Foundry service",
  select_service_plan: "Select a Cloud Foundry service plan",
  no_services_instances_found: `No service instances found`,
  create_service_enter_params: `Enter arbitrary parameters to be passed along to the service broker`,
  authentication_failed: (result: string) => `Authentication failed: ${result}`,
  ext_not_set: (extName: string) => `The ${extName} extension has not been set.`,
  targeting: (orgField: string, spaceField: string) => `Targeting Cloud Foundry ${orgField}/${spaceField}`,
  service_not_found: (instanceName: string) => `Could not find the '${instanceName}' service instance.`,
  service_created: (instanceName: string) => `The ${instanceName} service has been created.`,
  exceed_number_of_attempts: (name: string) => `Could not change the service-instance to the 'readSync' state. You may monitor its status using the'cf service ${name}' command.`,
  failed_creating_entity: (description: string, name: string) => `Could not create the ${description}  entity. Consider deleting it using the 'cf delete-service ${name} command.'`,
  target_created: (targetName: string) => `The '${targetName}' target has been created.`,
  creating_service: (instanceName: string, servieInfoLabel: string, planInfoLabel: string) => `Creating the ${instanceName}(${servieInfoLabel} - ${planInfoLabel}) service...`,
  error_env_missing_key: (key: string) => `The '.env' file is missing a key ${key}`,
  tagged_resource_not_found: (name: string) => `The ${name} tagged resouce was not found in the '.env' file`,
  target_deleted: (targetLabel: string) => `The '${targetLabel}' target has been deleted.`,
  activation_extension: (extname: string) => `Activating the "${extname}" extension.`,
  no_services_found: (plan: string) => `No services were found for the '${plan}' service_plan`,
  no_services_instances_found_for_type: (name: string) => `No service instances found for ${name} type`,
  extension_active: (extname: string) => `The "${extname}" extension is now active.`,
  error_service_params_mandatory: (name: string) => `You must provide a value for the ${name}`,
  error_service_params_max_length:  (name: string, length: number) => `The ${name} may be composed of up to ${length} characters`,
  error_service_params_value_not_allowed: (name: string) => `Invalid value for the ${name}`,
  service_bound_successful: (service: string, path: string) => `Service ${service} has been bound to ${path}`,
  no_service_plan_info_found: (plan: string, service: string) => `Could not find ${plan} service plan info for ${service} service`,
  no_service_plans_found: (service: string) => `No service plans found for ${service} service`
};
